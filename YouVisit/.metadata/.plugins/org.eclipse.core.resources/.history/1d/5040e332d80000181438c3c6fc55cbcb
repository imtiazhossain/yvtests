package automationFramework.pages;

import automationFramework.pages.base.HomePageBasePage;
import automationFramework.utils.WebDriverUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.How;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.sikuli.script.FindFailed;
import org.sikuli.script.Screen;
import org.testng.Assert;

import static org.testng.Assert.assertEquals;

import java.awt.*;

public class DarthmouthHomePage extends HomePageBasePage {

    @FindBy(how = How.XPATH, using = "//span[contains(text(),'Dartmouth Athletics')]")
    WebElement lblDarthMouthAthletics;

    @FindBy(how = How.XPATH, using = "//div[contains(@style,'opacity: 1')]/div[text()='DARTMOUTH ATHLETICS'] ")
    WebElement lblDarthMouthAthleticsLocation;

    @FindBy(how = How.XPATH, using = "//*[@id='stopsListItem1']/div[text()='Dartmouth Hall']")
    WebElement DartmoutHallScene;

    @FindBy(how = How.XPATH, using = "//span[contains(text(),'Dartmouth College')]")
    WebElement lblDartmouthCollege;

   @FindBy(how=How.ID, using ="mapFloat")
    WebElement map;
    
    @FindBy(how = How.ID, using ="map_minus_button")
    WebElement mapMinusButton;

    @FindBy(how = How.ID, using ="mapMinArrow_button")
    WebElement mapMinArrowButton;
    
    @FindBy(how = How.XPATH, using = "//div[@id='mapMin_button']")
    WebElement mapMiniButton;
     
    @FindBy(how = How.XPATH, using = "//div[@id='mapFull_button']")
    WebElement mapFullScreenButton;
    
    @FindBy(how = How.XPATH, using = "//div[@id='mapFull_button']/span/div")
    WebElement minimizeMapButton;
    
    @FindBy(how = How.XPATH, using = "//div[@data-title='Basketball']")
    WebElement stop_Basketball;
    
    @FindBy(how = How.CSS, using = "div#scene-description")
    WebElement sceneDescription;
    
    @FindBy(how = How.XPATH, using = "//div[@data-title='RECREATION OVERVIEW']")
    WebElement stop_RECREATIONOVERVIEW;
    
   @FindBy(how = How.ID, using = "language_button")
   WebElement languageButton; 
   
   @FindBy(how = How.XPATH, using = "//label[text()='Spanish']")
   WebElement spanishLanguage;
   
   @FindBy(how = How.XPATH, using = "//*[@id='CTAsShown-Copy']")
   WebElement VRButton;
   
   @FindBy(how = How.XPATH, using = "//li[@aria-label='View in VR QR Code']")
   WebElement QRCode; 
   
   @FindBy(how = How.ID, using = "context_audio_button_button")
   WebElement audioOn;
   
   @FindBy(how = How.CSS, using = "div[id='context_audio_button_button'] div[class*='speaker_off_']")
   WebElement audioOff;
   
    public boolean isDarthMouthAthleticsExpLoaded() {
        return WebDriverUtils.isElementPresent(driver, lblDarthMouthAthletics);

    }

    public DarthmouthHomePage(WebDriver driver) {
        super(driver);
        if (!this.isLoaded()) {
            throw new IllegalStateException("This is not DarthMouth HomePage");
        }
    }

    public DarthmouthExperiencePage navigateToExperiences() {

        //navigateToExperience();

        return PageFactory.initElements(driver, DarthmouthExperiencePage.class);
    }

    public boolean verifyExperienceDrawerIsNotDisplayed() {

        return WebDriverUtils.isElementPresent(driver, By.xpath("//div[contains(text(),'Select an Experience')]"));
    }

    public boolean verifySceneLocationIsHighlightedAndDisplayed() {

        return WebDriverUtils.isElementPresent(driver, lblDarthMouthAthleticsLocation);
    }

    public void hoverLeftSide(int x, int y) {

        WebDriverUtils.waitSeconds(5);

        Robot robot = null;
        try {
            robot = new Robot();
        } catch (AWTException e) {
            e.printStackTrace();
        }
        robot.mouseMove(x, y);

        WebDriverUtils.waitSeconds(3);
    }

    public void hoverScene() {
        WebDriverUtils.mouseoverElement(driver, DartmoutHallScene);
        WebDriverUtils.waitSeconds(3);
    }


    public void selectDartmoutHallScene() {

        DartmoutHallScene.click();
        WebDriverUtils.waitSeconds(5);
    }

    public boolean wasDartmoutHallSceneSelected() {

        return lblDartmouthCollege.isDisplayed();
    }

    public DarthmouthExperiencePage clickDarrhMouthCollegueExperienceLbl() {

        lblDartmouthCollege.click();

        return PageFactory.initElements(driver, DarthmouthExperiencePage.class);
    }
    
    public boolean isSemiExpandedMapDisplyed() 
    {
    	try {
			WebDriverUtils.move(0, 0);
		} catch (AWTException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	WebDriverUtils.mouseoverElement(driver, map);
    	 
    	return WebDriverUtils.isElementPresent(driver, mapMinusButton);
    }
    
    public void minimizeMap()
    {
    	Dimension dim = mapMinArrowButton.getSize();
    	int x = dim.getHeight();
    	int y = dim.getWidth();
    	
    	try {
			WebDriverUtils.click(x, y);
		} catch (AWTException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	mapMinArrowButton.click();
    	WebDriverUtils.waitSeconds(5);
    }
        
    public boolean isMapMinimized()
    {
    	return WebDriverUtils.isElementPresent(driver, mapMiniButton);
    }
    
    public void clickFullScreenButton()
    {
    	Dimension dim = mapFullScreenButton.getSize();
    	int x = dim.getHeight();
    	int y = dim.getWidth();
    	try {
			WebDriverUtils.click(x, y);
		} catch (AWTException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	WebDriverUtils.waitSeconds(5);
    }
    
    public void clickMaximizeMapButton()
    {
    	try {
			WebDriverUtils.move(0, 0);
		} catch (AWTException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	//WebDriverUtils.mouseoverElement(driver, map);
    	WebDriverUtils.waitSeconds(5);
    	WebDriverUtils.mouseMoveAndClickOnElement(driver, map);
    	mapFullScreenButton.click();
    	
    	
    }
    
    public String isMapMaximized()
    {
    	return minimizeMapButton.getCssValue("background-size");
    }

    public boolean clickOnMinimizedMapButton()
    {
    	WebDriverUtils.waitSeconds(30);
    	WebDriverUtils.getElementWhenClickeable(mapMinArrowButton, 50, driver).click();
    	//mapMinArrowButton.click();
    	mapMiniButton.click();
    	return WebDriverUtils.isElementPresent(driver, mapMinArrowButton);
    	
    }
    
    public boolean clickMinimizeButtonOnExpandedMap()
    {
    	//WebDriverUtils.waitSeconds(30);
    	WebDriverUtils.waitTillPageLoad(driver);
    	try {
			WebDriverUtils.move(0, 0);
		} catch (AWTException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	WebDriverUtils.mouseMoveAndClickOnElement(driver, map);
    	mapFullScreenButton.click();
    	WebDriverUtils.waitTillPageLoad(driver);
    	mapFullScreenButton.click();
    	WebDriverUtils.waitTillPageLoad(driver);
    	return	WebDriverUtils.isElementPresent(driver, mapMinArrowButton);
    }
    
    public boolean selectStopFromExpandedMapAndCloseMap()
    {
    	try {
			WebDriverUtils.move(0, 0);
		} catch (AWTException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	Boolean flag=false;
    	WebDriverUtils.waitSeconds(30);
    	WebDriverUtils.mouseMoveAndClickOnElement(driver, map);
    	WebDriverUtils.getElementWhenClickeable(mapFullScreenButton, 50, driver).click();
    	//WebDriverUtils.sikuliClick("E:/maximizeArrow.png");
    	stop_Basketball.click();
    	WebDriverUtils.waitSeconds(5);
    	flag = sceneDescription.getText().contains("I'm a Dartmouth basketball player");
    	flag = WebDriverUtils.isElementPresent(driver, mapMinArrowButton);
    	return flag;
    }
    
    public boolean selectStopFromSemiExpandedMap()
    {
    	try {
			WebDriverUtils.move(0, 0);
		} catch (AWTException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	
    	WebDriverUtils.mouseMoveAndClickOnElement(driver, map);
    	stop_RECREATIONOVERVIEW.click();
    	WebDriverUtils.waitSeconds(5);
    	return sceneDescription.getText().contains("the largest recreational fitness center");
    }
    
    public boolean selectLanguage()
    {
    	WebDriverUtils.getElementWhenClickeable(languageButton, 50, driver).click();
    	//languageButton.click();
    	spanishLanguage.click();
    	return sceneDescription.getText().contains("Bienvenidos a Dartmouth! Mi nombre es Miguel,");
    }
    
    public boolean isQRCodeDisplayed()
    {
    	WebDriverUtils.waitSeconds(40);
    	WebDriverUtils.getElementWhenClickeable(VRButton, 50, driver).click();
    	WebDriverUtils.waitSeconds(3);
    	return WebDriverUtils.isElementPresent(driver, QRCode);
    }
    
    public boolean isAudioStopped()
    {
    	WebDriverUtils.waitSeconds(40);
    	WebElement audio = WebDriverUtils.getElementWhenClickeable(audioOn, 50, driver);
    	audio.click();
    	return WebDriverUtils.isElementPresent(driver, audioOff);
    	
    }
    @Override
    public By getPageLoadedLocator() {
        return By.xpath("//*[@id='info_button']");
    }
    
    
   
}